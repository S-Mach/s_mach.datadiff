= s_mach.datadiff: data difference engine
Lance Gatlin <lance.gatlin@gmail.com>
v2,23-Dec-2014
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

*UNDER CONSTRUCTION*

image:https://travis-ci.org/S-Mach/s_mach.datadiff.svg[Build Status, link="https://travis-ci.org/S-Mach/s_mach.datadiff"]  image:https://coveralls.io/repos/S-Mach/s_mach.datadiff/badge.png[Test Coverage,link="https://coveralls.io/r/S-Mach/s_mach.datadiff"] https://github.com/S-Mach/s_mach.datadiff[Code] http://s-mach.github.io/s_mach.datadiff/#s_mach.datadiff.package[Scaladoc]

+s_mach.datadiff+ is an open-source data difference engine for Scala.
Implementations of the +DataDiff+ type-class are provided which can compute the
difference between all data types, +Option+, +Set+, +Seq+, and +Map+ and all
tuple classes. An implementation for any case case class (or other type that can
be represented as a +struct type+) can be generated at compile-time by the
+mkDataDiff+ macro method. The difference between any two instances is stored as
a +patch type+, which can be user-defined per type. Patches can be applied to
instances of the original type to propagate computed changes. All provided
+DataDiff+ implementations are 100% strongly-typed and use absolutely no
runtime reflection.

== Include in SBT
1. Add to +build.sbt+
+
[source,sbt,numbered]
----
libraryDependencies += "net.s_mach" %% "datadiff" % "0.1-SNAPSHOT"
----
NOTE: +s_mach.datadiff+ is currently only compiled for Scala 2.11 (though 2.10.4
support can be added if there is interest)

== Versioning
+s_mach.datadiff+ uses semantic versioning (http://semver.org/).
+s_mach.datadiff+ does not use the package private modifier. Instead, all code
files outside of the +s_mach.datadiff.impl+ package form the public interface
and are governed by the rules of semantic versioning. Code files inside the
+s_mach.datadiff.impl+ package may be used by downstream applications and
libraries. However, no guarantees are made as to the stability or interface of
code in the +s_mach.datadiff.impl+ package between versions.


== Example: Compute the difference between case classes and apply patches
----
Welcome to Scala version 2.11.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_72).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :paste
// Entering paste mode (ctrl-D to finish)

import s_mach.datadiff._

case class Person(
  name: String,
  age: Int,
  friends: Set[Person] = Set.empty
)
case class PersonPatch(
  name: Option[String],
  age: Option[Int],
  friends: Option[SetPatch[Person]]
)
object Person {
  implicit val dataDiff_Person = mkDataDiff[Person,PersonPatch]
}

val friend1 = Person("Hal",46)
val friend2 = Person("Wintermute",30)
val friend3 = Person("Samantha",1)

val p1 = Person("Lance",36,Set(friend1,friend2))
val p2 = Person("Lance",37,Set(friend1,friend2,friend3))

// Exiting paste mode, now interpreting.

import s_mach.datadiff._
defined class Person
defined class PersonPatch
defined object Person
friend1: Person = Person(Hal,46,Set())
friend2: Person = Person(Wintermute,30,Set())
friend3: Person = Person(Samantha,1,Set())
p1: Person = Person(Lance,36,Set(Person(Hal,46,Set()), Person(Wintermute,30,Set())))
p2: Person = Person(Lance,37,Set(Person(Hal,46,Set()), Person(Wintermute,30,Set()), Person(Samantha,1,Set())))

scala> val patch = p1 calcDiff p2
patch: Option[PersonPatch] = Some(PersonPatch(None,Some(37),Some(SetPatch(Set(Person(Samantha,1,Set())),Set()))))

scala> val patch2 = p1 calcDiff p1
patch: Option[PersonPatch] = None

scala> val p3 = p1 applyPatch patch
p3: Person = Person(Lance,37,Set(Person(Hal,46,Set()), Person(Wintermute,30,Set()), Person(Samantha,1,Set())))

scala> val test1 = p3 == p2
test1: Boolean = true

scala> val p4 = p1 applyPatch patch2
p4: Person = Person(Lance,36,Set(Person(Hal,46,Set()), Person(Wintermute,30,Set())))

scala> val test2 = p4 == p1
test1: Boolean = true

----